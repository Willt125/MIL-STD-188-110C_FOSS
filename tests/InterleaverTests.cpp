
#include <gtest/gtest.h>
#include "milstd110c/Interleaver.h"
#include "milstd110c/bitstream.h"
#include <array>
#include <cstdint>

using namespace mil::std110c;

static constexpr size_t kNumBits = Interleaver::kRows * Interleaver::kColumns;
static constexpr size_t kNumTribits = kNumBits / 3;

static const std::array<uint8_t, 960> kZerosExpected = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};
static const std::array<uint8_t, 960> kAlternatingExpected = {
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
    2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,
};
static const std::array<uint8_t, 960> kRandomExpected = {
    0, 0, 6, 0, 1, 2, 5, 0, 6, 7, 0, 3, 2, 1, 0, 6, 3, 1, 1, 6,
    7, 6, 4, 0, 6, 2, 5, 5, 1, 4, 3, 0, 2, 0, 3, 5, 1, 0, 5, 6,
    1, 1, 2, 0, 4, 2, 6, 7, 0, 3, 4, 6, 0, 5, 4, 4, 7, 1, 2, 7,
    5, 3, 5, 7, 4, 7, 4, 7, 4, 7, 4, 6, 5, 1, 4, 3, 4, 0, 1, 7,
    1, 2, 4, 4, 0, 4, 1, 4, 5, 1, 2, 1, 2, 4, 2, 5, 2, 7, 0, 7,
    4, 3, 1, 5, 4, 2, 6, 0, 3, 6, 6, 7, 7, 4, 3, 3, 3, 1, 6, 3,
    1, 1, 0, 0, 6, 3, 0, 3, 3, 6, 2, 0, 5, 4, 7, 3, 7, 0, 4, 2,
    3, 2, 4, 0, 2, 6, 3, 2, 7, 0, 3, 3, 6, 6, 2, 3, 4, 0, 3, 7,
    7, 6, 3, 7, 4, 4, 5, 4, 7, 0, 5, 3, 2, 2, 6, 6, 4, 3, 6, 0,
    4, 4, 6, 4, 7, 0, 1, 5, 3, 1, 3, 7, 7, 1, 0, 5, 2, 4, 5, 1,
    0, 0, 1, 6, 5, 2, 4, 1, 7, 1, 6, 1, 1, 1, 6, 3, 6, 1, 3, 6,
    2, 1, 2, 7, 4, 6, 4, 6, 6, 7, 2, 5, 6, 4, 3, 2, 7, 5, 1, 0,
    6, 5, 4, 5, 1, 1, 3, 1, 7, 0, 0, 7, 7, 2, 1, 6, 5, 2, 4, 0,
    1, 3, 6, 1, 3, 4, 0, 1, 2, 2, 6, 2, 7, 3, 7, 6, 5, 0, 3, 4,
    0, 3, 7, 2, 3, 3, 0, 1, 4, 1, 5, 3, 3, 2, 5, 4, 0, 6, 1, 5,
    6, 1, 6, 6, 6, 7, 3, 6, 4, 4, 7, 3, 1, 4, 6, 0, 3, 0, 1, 4,
    1, 1, 7, 0, 5, 6, 3, 4, 5, 2, 3, 6, 4, 4, 5, 1, 1, 6, 2, 1,
    3, 6, 6, 7, 4, 3, 0, 1, 1, 7, 2, 7, 7, 5, 4, 4, 0, 1, 3, 1,
    4, 6, 2, 2, 2, 6, 2, 6, 5, 1, 0, 7, 7, 2, 1, 4, 3, 1, 0, 0,
    0, 3, 0, 7, 4, 7, 2, 2, 3, 2, 3, 6, 2, 3, 1, 7, 7, 1, 7, 7,
    6, 2, 6, 5, 5, 4, 7, 1, 2, 6, 4, 2, 4, 1, 0, 7, 0, 5, 7, 3,
    5, 4, 5, 7, 0, 2, 2, 1, 4, 5, 6, 7, 0, 4, 0, 6, 5, 6, 7, 3,
    6, 1, 1, 1, 1, 2, 5, 1, 1, 4, 5, 4, 4, 2, 5, 1, 2, 0, 7, 7,
    0, 4, 4, 4, 3, 2, 7, 2, 4, 5, 0, 2, 4, 2, 4, 0, 4, 7, 5, 2,
    0, 0, 6, 0, 1, 2, 5, 0, 6, 7, 0, 3, 2, 1, 0, 6, 3, 1, 1, 6,
    7, 6, 4, 0, 6, 2, 5, 5, 1, 4, 3, 0, 2, 0, 3, 5, 1, 0, 5, 6,
    1, 1, 2, 0, 4, 2, 6, 7, 0, 3, 4, 6, 0, 5, 4, 4, 7, 1, 2, 7,
    5, 3, 5, 7, 4, 7, 4, 7, 4, 7, 4, 6, 5, 1, 4, 3, 4, 0, 1, 7,
    1, 2, 4, 4, 0, 4, 1, 4, 5, 1, 2, 1, 2, 4, 2, 5, 2, 7, 0, 7,
    4, 3, 1, 5, 4, 2, 6, 0, 3, 6, 6, 7, 7, 4, 3, 3, 3, 1, 6, 3,
    1, 1, 0, 0, 6, 3, 0, 3, 3, 6, 2, 0, 5, 4, 7, 3, 7, 0, 4, 2,
    3, 2, 4, 0, 2, 6, 3, 2, 7, 0, 3, 3, 6, 6, 2, 3, 4, 0, 3, 7,
    7, 6, 3, 7, 4, 4, 5, 4, 7, 0, 5, 3, 2, 2, 6, 6, 4, 3, 6, 0,
    4, 4, 6, 4, 7, 0, 1, 5, 3, 1, 3, 7, 7, 1, 0, 5, 2, 4, 5, 1,
    0, 0, 1, 6, 5, 2, 4, 1, 7, 1, 6, 1, 1, 1, 6, 3, 6, 1, 3, 6,
    2, 1, 2, 7, 4, 6, 4, 6, 6, 7, 2, 5, 6, 4, 3, 2, 7, 5, 1, 0,
    6, 5, 4, 5, 1, 1, 3, 1, 7, 0, 0, 7, 7, 2, 1, 6, 5, 2, 4, 0,
    1, 3, 6, 1, 3, 4, 0, 1, 2, 2, 6, 2, 7, 3, 7, 6, 5, 0, 3, 4,
    0, 3, 7, 2, 3, 3, 0, 1, 4, 1, 5, 3, 3, 2, 5, 4, 0, 6, 1, 5,
    6, 1, 6, 6, 6, 7, 3, 6, 4, 4, 7, 3, 1, 4, 6, 0, 3, 0, 1, 4,
    1, 1, 7, 0, 5, 6, 3, 4, 5, 2, 3, 6, 4, 4, 5, 1, 1, 6, 2, 1,
    3, 6, 6, 7, 4, 3, 0, 1, 1, 7, 2, 7, 7, 5, 4, 4, 0, 1, 3, 1,
    4, 6, 2, 2, 2, 6, 2, 6, 5, 1, 0, 7, 7, 2, 1, 4, 3, 1, 0, 0,
    0, 3, 0, 7, 4, 7, 2, 2, 3, 2, 3, 6, 2, 3, 1, 7, 7, 1, 7, 7,
    6, 2, 6, 5, 5, 4, 7, 1, 2, 6, 4, 2, 4, 1, 0, 7, 0, 5, 7, 3,
    5, 4, 5, 7, 0, 2, 2, 1, 4, 5, 6, 7, 0, 4, 0, 6, 5, 6, 7, 3,
    6, 1, 1, 1, 1, 2, 5, 1, 1, 4, 5, 4, 4, 2, 5, 1, 2, 0, 7, 7,
    0, 4, 4, 4, 3, 2, 7, 2, 4, 5, 0, 2, 4, 2, 4, 0, 4, 7, 5, 2,
};

TEST(InterleaverTests, MatchesReferenceImplementation) {
    Interleaver interleaver;

    // All zeros input
    BitStream zero_input;
    for (size_t i = 0; i < kNumBits; ++i) zero_input.putBit(0);
    auto zero_output = interleaver.interleave(zero_input);
    ASSERT_EQ(zero_output.size(), kNumTribits);
    for (size_t i = 0; i < kNumTribits; ++i) {
        EXPECT_EQ(zero_output[i], kZerosExpected[i]);
    }

    // Alternating bits input
    BitStream alt_input;
    for (size_t i = 0; i < kNumBits; ++i) alt_input.putBit(i % 2);
    auto alt_output = interleaver.interleave(alt_input);
    for (size_t i = 0; i < kNumTribits; ++i) {
        EXPECT_EQ(alt_output[i], kAlternatingExpected[i]);
    }

    // Pseudo-random bits input using LCG
    BitStream rand_input;
    uint32_t seed = 1;
    for (size_t i = 0; i < kNumBits; ++i) {
        seed = 1103515245u * seed + 12345u;
        rand_input.putBit((seed >> 31) & 1u);
    }
    auto rand_output = interleaver.interleave(rand_input);
    for (size_t i = 0; i < kNumTribits; ++i) {
        EXPECT_EQ(rand_output[i], kRandomExpected[i]);
    }
}
